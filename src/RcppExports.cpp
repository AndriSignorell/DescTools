// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// compute_GCD
int compute_GCD(int a, int b);
RcppExport SEXP _DescTools_compute_GCD(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_GCD(a, b));
    return rcpp_result_gen;
END_RCPP
}
// compute_LCM
int compute_LCM(int a, int b);
RcppExport SEXP _DescTools_compute_LCM(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type a(aSEXP);
    Rcpp::traits::input_parameter< int >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_LCM(a, b));
    return rcpp_result_gen;
END_RCPP
}
// divs
IntegerVector divs(int x);
RcppExport SEXP _DescTools_divs(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(divs(x));
    return rcpp_result_gen;
END_RCPP
}
// n_pow_sum
List n_pow_sum(NumericVector x);
RcppExport SEXP _DescTools_n_pow_sum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(n_pow_sum(x));
    return rcpp_result_gen;
END_RCPP
}
// conv_DecToBin
std::vector< std::string > conv_DecToBin(std::vector< int > n);
RcppExport SEXP _DescTools_conv_DecToBin(SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector< int > >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(conv_DecToBin(n));
    return rcpp_result_gen;
END_RCPP
}
// top_n
Rcpp::List top_n(Rcpp::NumericVector x, int n);
RcppExport SEXP _DescTools_top_n(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(top_n(x, n));
    return rcpp_result_gen;
END_RCPP
}
// bottom_n
Rcpp::List bottom_n(Rcpp::NumericVector x, int n);
RcppExport SEXP _DescTools_bottom_n(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(bottom_n(x, n));
    return rcpp_result_gen;
END_RCPP
}
// top_i
IntegerVector top_i(NumericVector v, unsigned int n);
RcppExport SEXP _DescTools_top_i(SEXP vSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(top_i(v, n));
    return rcpp_result_gen;
END_RCPP
}
// bottom_i
IntegerVector bottom_i(NumericVector v, unsigned int n);
RcppExport SEXP _DescTools_bottom_i(SEXP vSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type v(vSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(bottom_i(v, n));
    return rcpp_result_gen;
END_RCPP
}
// fastMode
SEXP fastMode(SEXP x, bool narm);
RcppExport SEXP _DescTools_fastMode(SEXP xSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fastMode(x, narm));
    return rcpp_result_gen;
END_RCPP
}
// fastModeX
SEXP fastModeX(SEXP x, bool narm);
RcppExport SEXP _DescTools_fastModeX(SEXP xSEXP, SEXP narmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type narm(narmSEXP);
    rcpp_result_gen = Rcpp::wrap(fastModeX(x, narm));
    return rcpp_result_gen;
END_RCPP
}
// dgompertz_work
Rcpp::NumericVector dgompertz_work(const Rcpp::NumericVector& x, const Rcpp::NumericVector& shape, const Rcpp::NumericVector& rate, const bool log);
RcppExport SEXP _DescTools_dgompertz_work(SEXP xSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const bool >::type log(logSEXP);
    rcpp_result_gen = Rcpp::wrap(dgompertz_work(x, shape, rate, log));
    return rcpp_result_gen;
END_RCPP
}
// pgompertz_work
Rcpp::NumericVector pgompertz_work(const Rcpp::NumericVector& q, const Rcpp::NumericVector& shape, const Rcpp::NumericVector& rate, const bool lower_tail, const bool give_log);
RcppExport SEXP _DescTools_pgompertz_work(SEXP qSEXP, SEXP shapeSEXP, SEXP rateSEXP, SEXP lower_tailSEXP, SEXP give_logSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type q(qSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rate(rateSEXP);
    Rcpp::traits::input_parameter< const bool >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< const bool >::type give_log(give_logSEXP);
    rcpp_result_gen = Rcpp::wrap(pgompertz_work(q, shape, rate, lower_tail, give_log));
    return rcpp_result_gen;
END_RCPP
}
// check_gompertz
Rcpp::LogicalVector check_gompertz(const Rcpp::NumericVector& shape, const Rcpp::NumericVector& rate);
RcppExport SEXP _DescTools_check_gompertz(SEXP shapeSEXP, SEXP rateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type shape(shapeSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type rate(rateSEXP);
    rcpp_result_gen = Rcpp::wrap(check_gompertz(shape, rate));
    return rcpp_result_gen;
END_RCPP
}
