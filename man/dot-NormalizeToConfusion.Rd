% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/NormalizeToConfusion.R
\name{.NormalizeToConfusion}
\alias{.NormalizeToConfusion}
\title{Normalize input to a 2-rater confusion/coincidence matrix}
\usage{
.NormalizeToConfusion(
  x,
  y = NULL,
  levels = NULL,
  useNA = "no",
  rater.pair = c(1L, 2L)
)
}
\arguments{
\item{x}{Input object (see details).}

\item{y}{Optional second vector of ratings (used only if \code{x} is a single vector).}

\item{levels}{Optional vector of category levels to enforce (same order for rows/cols).
If \code{NULL}, levels are inferred from the union of observed categories.}

\item{useNA}{Passed to \code{table()} when building the contingency table
(e.g., \code{"no"}, \code{"ifany"}, \code{"always"}).}

\item{rater.pair}{Integer length-2 vector giving the indices of the two raters to use
when \code{x} has \eqn{\ge}2 columns/entries (default \code{c(1,2)}).}
}
\value{
A square numeric \code{matrix} with dimnames (rows = rater A levels, cols = rater B levels).
}
\description{
Accepts diverse inputs and returns a square contingency table (matrix)
for exactly two raters across \eqn{k} categories.
}
\details{
Supported inputs:
\itemize{
\item \strong{table} (2D): already a confusion table.
\item \strong{matrix} that looks like a confusion table (square, non-negative, etc.).
\item \strong{matrix/data.frame} with \eqn{\ge}2 columns: interpreted as raw ratings
(subjects in rows, raters in columns). If more than two raters are present,
the pair to use is specified via \code{rater.pair}.
\item \strong{list} of \eqn{\ge}2 vectors: each element is one rater's ratings.
\item \strong{two vectors} \code{x}, \code{y}: ratings of two raters.
}
}
\examples{
# Two vectors:
A <- c("pos","neg","pos","inc")
B <- c("pos","pos","neg","inc")
NormalizeToConfusion(A, B)

# table:
tab <- table(A, B)
NormalizeToConfusion(tab)

# matrix/data.frame with >= 2 columns (subjects Ã— raters):
set.seed(1)
C <- sample(c("pos","neg","inc"), length(A), TRUE)
df <- data.frame(R1=A, R2=B, R3=C)
NormalizeToConfusion(df)              # uses R1 vs R2
NormalizeToConfusion(df, rater.pair=c(1,3))  # R1 vs R3

# list of rating vectors:
NormalizeToConfusion(list(A,B))

}
